Metadata-Version: 2.1
Name: Products.PythonScripts
Version: 4.2.dev0
Summary: Provides support for restricted execution of Python scripts in Zope 4.
Home-page: https://github.com/zopefoundation/Products.PythonScripts
Author: Zope Foundation and Contributors
Author-email: zope-dev@zope.org
License: ZPL 2.1
Platform: UNKNOWN
Classifier: Development Status :: 6 - Mature
Classifier: Environment :: Web Environment
Classifier: Framework :: Zope :: 4
Classifier: License :: OSI Approved :: Zope Public License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Dist: AccessControl
Requires-Dist: Acquisition
Requires-Dist: DateTime
Requires-Dist: DocumentTemplate
Requires-Dist: RestrictedPython (>=4.0b5)
Requires-Dist: Zope (>=4.0b6.dev0)
Requires-Dist: setuptools
Requires-Dist: zExceptions

Overview
========

The Python Scripts product provides support for restricted execution of
Python scripts, exposing them as callable objects within the Zope
environment.

Providing access to extra modules
---------------------------------

Python script objects have a limited number of "safe" modules
available to them by default. In the course of working with Zope,
you will probably wish to make other modules available to script
objects.

The Utility.py module in the PythonScripts products provides a
simple way to make modules available for use by script objects
on a site-wide basis. Before making a module available to Python
scripts, you should carefully consider the potential for abuse
or misuse of the module, since all users with permission to
create and edit Python scripts will be able to use any functions
and classes defined in the module. In some cases, you may want to
create a custom module that just imports a subset of names from
another module and make that custom module available to reduce
the risk of abuse.

The easiest way to make modules available to Python scripts on
your site is to create a new directory in your Products directory
containing an `__init__.py` file. At Zope startup time, this
"product" will be imported, and any module assertions you make
in the `__init__.py` will take effect. Here's how to do it:

- In your Products directory (either in lib/python of your
  Zope installation or in the root of your Zope install,
  depending on your deployment model), create a new directory
  with a name like "GlobalModules".

- In the new directory, create a file named `__init__.py`.

- Edit the `__init__.py` file, and add calls to the 'allow_module'
  function (located in the Products.PythonScripts.Utility module),
  passing the names of modules to be enabled for use by scripts.
  For example::

    # Global module assertions for Python scripts
    from Products.PythonScripts.Utility import allow_module

    allow_module('base64')
    allow_module('re')
    allow_module('DateTime.DateTime')

  This example adds the modules 'base64', 're' and the 'DateTime'
  module in the 'DateTime' package for use by Python scripts. Note
  that for packages (dotted names), each module in the package path
  will become available to script objects.

- Restart your Zope server. After restarting, the modules you enabled
  in your custom product will be available to Python scripts.

Placing security assertions within the package/module you are trying
to import will not work unless that package/module is located in
your Products directory.

This is because that package/module would have to be imported for its
included security assertions to take effect, but to do
that would require importing a module without any security
declarations, which defeats the point of the restricted
Python environment.

Products work differently as they are imported at Zope startup.
By placing a package/module in your Products directory, you are
asserting, among other things, that it is safe for Zope to check
that package/module for security assertions. As a result, please
be careful when place packages or modules that are not Zope Products
in the Products directory.

Changelog
=========

4.2 (unreleased)
----------------

- Add support for Python 3.7.

- Drop support for Python 3.4.

- Force recompilation of scripts as the compiled code is now stored
  on `__code__` instead of `func_code`.

- Add a Python 3 compatible default script.
  https://github.com/zopefoundation/Products.PythonScripts/pull/10

- Fix security declaration for ``Products.PythonScripts.standard`` which was
  broken since version 3.0.
  https://github.com/zopefoundation/Zope/issues/209

- Fix HTTP-500 error which occurred when entering code containing a
  syntax error in a PythonScript. It is now rendered as error message like
  other errors.
  (`#11 <https://github.com/zopefoundation/Products.PythonScripts/issues/11>`_)

- Update the tests to `RestrictedPython >= 4.0b4`, thus requiring at lest this
  version.
  (`#17 <https://github.com/zopefoundation/Products.PythonScripts/pull/17>`_)

- Update HTML code of ZMI for Bootstrap ZMI.
  (`#16 <https://github.com/zopefoundation/Products.PythonScripts/pull/16>`_)

- Drop support for historical versions which no longer exist since Zope 4.0a2.


4.1 (2017-06-19)
----------------

- Add support for Python 3.4 up to 3.6.


4.0.1 (2017-02-06)
------------------

- Remove `bobobase_modification_time` from edit template.

4.0 (2016-08-06)
----------------

- Add compatibility with webdav changes in Zope 4.0a2.

.. caution::

    This version needs Zope2 >= 4.0 to run!

3.0 (2016-07-18)
----------------

- Remove HelpSys support.

2.13.2 (2012-09-09)
-------------------

- Correct module security declaration for our `standard` module.

2.13.1 (2012-09-09)
-------------------

- LP #1047318: Adjust tests.

2.13.0 (2010-07-10)
-------------------

- Released as separate package.


